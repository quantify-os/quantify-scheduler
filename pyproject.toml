[build-system]
requires = ["setuptools>=66.1"]
build-backend = "setuptools.build_meta"

[project]
name = "quantify-scheduler"
description="""\
 Quantify-scheduler is a Python package for writing quantum programs featuring \
 a hybrid gate-pulse control model with explicit timing control.\
"""
maintainers = [
 {name = "Edgar Reehuis", email = "ereehuis@qblox.com"},
 {name = "Robert Sokolewicz", email = "rsokolewicz@qblox.com"},
 {name = "Amirtha Varshiny Arumugam", email = "amirthavarshiny@orangeqs.com"},
 {name = "Viacheslav Ostroukh", email = "viacheslav@orangeqs.com"},
 {name = "Gábor Oszkár Dénes", email = "gdenes@qblox.com"},
]
classifiers = [
 "Development Status :: 4 - Beta",
 "Intended Audience :: Developers",
 "Intended Audience :: Science/Research",
 "License :: OSI Approved :: BSD License",
 "Natural Language :: English",
 "Programming Language :: Python :: 3",
 "Programming Language :: Python :: 3.8",
 "Programming Language :: Python :: 3.9",
 "Programming Language :: Python :: 3.10",
 "Programming Language :: Python :: 3.11",
 "Programming Language :: Python :: 3.12",
 "Topic :: Scientific/Engineering",
]
keywords = [
 "quantum",
 "quantify",
]
license = { text = "BSD-3-Clause" }
dynamic = ["version", "readme"]
requires-python = ">=3.8"
dependencies = [
 "columnar",
 "dataclasses-json",
 'eval-type-backport; python_version < "3.10"', # Required for pydantic's type checking in Python 3.8 and 3.9
 "fastjsonschema",
 "jinja2>=3.1.2", # pandas requires version 3.1.2 or newer
 "matplotlib",
 "networkx",
 "numpy<2.0 ; python_version < '3.10'",
 "numpy ; python_version >= '3.10'",
 "pandas[output_formatting]",
 "pathvalidate",
 "plotly",
 "pydantic>=2.0",
 "qblox-instruments>=0.14.0,<0.15.0", # Prevent upgrade upon minor release while allowing for installing patch releases
 "quantify-core>=0.7.9", # acquisition data refactor in ScheduleGettable.
 "qcodes>=0.32.0", # 0.32.0: introduces InstrumentModule
 "scipy",
 "xxhash",

 # We are using rich in our tutorials
 "rich[jupyter]",
]

[project.optional-dependencies]
test = [
 "pytest",
 "pytest-mock",
 "diff-cover",
 "pytest-mpl",
]

docs = [
 # astroid only added to prevent to sphinx-autoapi error AttributeError: 'Module' object has no attribute 'doc' (!838)
 # (solvable by sphinx-autoapi>=3, see https://stackoverflow.com/q/77257145, but requires sphinx>=6.2 while latest myst-nb-0.17.2 requires sphinx<6)
 "astroid<3.0",
 "jupyter_sphinx>=0.4.0",
 "jupytext",
 "sphinx",
 "pydata-sphinx-theme",
 "myst-nb",
 "hvplot",
 "pylint",
 "rich[jupyter]",
 "scanpydoc<0.12", # 0.12.0 and 0.12.1 parse return type in docstrings incorrectly. see also https://github.com/theislab/scanpydoc/issues/120.
 "sphinx-autoapi",
 "sphinx-autodoc-typehints", # required by either sphinx.ext.autodoc or sphinx.ext.napoleon
 "sphinx-design",
 "sphinx-jsonschema",
 "sphinx-togglebutton",
 "sphinx-copybutton",
 "sphinxcontrib-bibtex",
 "sphinxcontrib-mermaid",
 "quantify_scheduler[zhinst]",
 "scikit-learn", # can be removed when quantify-core==0.8.0 is released
]

dev = [
 "black",
 "coverage",
 "pre-commit",
 "pre-commit-hooks", # common hooks for git repos
 "prospector",
 "pyright!=1.1.309",  # Version excluded because of a bug (https://github.com/microsoft/pyright/issues/5126).
 # Pytest-cov is used to generage test coverage reports, which is rather a development than testing requirement
 "pytest-cov",
 "pytest-xdist", # run tests in parallel
 "ruff",  # linter
 "quantify-scheduler[docs,test]",
 # Live rebuild of Documentation
 "sphinx-autobuild",
 "quantify_scheduler[zhinst]",
]

zhinst = [
 "zhinst==21.8.20515; python_version<'3.10'",
 "zhinst-qcodes==0.1.4; python_version<'3.10'",
 "zhinst-toolkit==0.1.5; python_version<'3.10'",
]

[project.urls]
"Documentation" = "https://quantify-os.org/docs/quantify-scheduler/"
"Source" = "https://gitlab.com/quantify-os/quantify-scheduler"
"Issue tracker" = "https://gitlab.com/quantify-os/quantify-scheduler/-/issues"
"Changelog" = "https://gitlab.com/quantify-os/quantify-scheduler/-/blob/main/CHANGELOG.md"
"Slack" = "https://join.slack.com/t/quantify-hq/shared_invite/zt-1nd78r4e9-rbWdna53cW4DO_YbtMhVuA"
"Authors" = "https://gitlab.com/quantify-os/quantify-scheduler/-/blob/main/AUTHORS.md"


[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
include = ["quantify_scheduler", "quantify_scheduler.*"]

[tool.setuptools.package-data]
"*" = ["*.json"]

[tool.setuptools.dynamic]
readme = { file = ["README.md"], content-type = "text/markdown" }


[tool.ruff]
line-length = 100
lint.select = [
 "F",    # pyflakes
 "E",    # pycodestyle
 "W",    # pycodestyle
 "D",    # pydocstyle
 "I",    # isort
 "N",    # flake8-naming
 "UP",   # pyupgrade
 "TID",  # flake8-tidy-imports
 "SIM",  # flake8-simplify
 "TCH",  # flake8-type-checking
 "Q",    # flake8-quotes
 "ARG",  # flake8-unused-arguments
 "ANN",  # flake8-annotations
 # Pylint (PLC, PLE, PLR, PLW)
 "PLC",
 "PLE",
 "PLR",
 "PLW",
 # numpy 2.0 migration
 "NPY201",
]
lint.ignore = [
 "D105",     # Missing docstring in magic method
 "D107",     # Missing docstring in `__init__` (it should be completely absent in our convention)
 "D203",     # 1 blank line required before class docstring  (conflict with D211)
 "D205",     # blank-line-after-summary (Conflicts when summary is too large
 "D212",     # Multi-line docstring summary should start at the first line (conflict with D213)
 "D401",     # Docstrings should be in imperative mood
 "ANN002",   # Missing type annotation for *{name}
 "ANN003",   # Missing type annotation for **{name}
 "ANN101",   # Missing type annotation for `self` in method
 "ANN102",   # Missing type annotation for `cls` in class method
 "PLR2004",  # Magic value used in comparison, consider replacing `...` with a constant variable
 "PLR0912",  # Too many branches (... > 12)
 "PLR0913",  # Too many arguments to function call (.../5)
]
extend-exclude = [
 "docs",
]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["I", "Q", "*path_I*", "*path_Q*", "*G_amp", "*D_amp", "qT", "qC"]

[tool.ruff.lint.per-file-ignores]
# - E402: Module level import not at top of file
# - F401: Multiple imports on one line

# Project specific files
"setup.py" = ["D", "ANN"]
"*/docs/source/conf.py" = ["E402", "F401"]
"__init__.py" = ["F401", "D104", "D205", "D415", "D400"]
"quantify_scheduler/_version.py" = ["ANN001", "ANN202"]  # _version.py doesn't need to be properly annotated

# Test don't need to be properly linted
"tests/**/*.py" = ["D", "ANN", "F401", "F403", "F811", "ARG001", "N806"]

# Type checking and naming conventions for the pydantic files (backends/types) is annoying
"quantify_scheduler/backends/types/common.py" = ["ANN001", "ANN201", "ANN202", "N805", "TCH001", "TCH002"]
"quantify_scheduler/backends/types/qblox.py" = ["ANN001", "ANN102", "ANN202","UP006", "UP007"]

# Files that will be removed/refactored away in future versions, so no need to do complex fixes
"zhinst_backend.py" = ["E402"]
"zhinst.py" = ["E402"]
"quantify_scheduler/backends/types/zhinst.py" = ["ANN001", "ANN201", "N805", "N815"]
"quantify_scheduler/backends/zhinst/helpers.py" = ["D417"]
"quantify_scheduler/backends/zhinst/resolvers.py" = ["D100", "D417"]
"quantify_scheduler/backends/zhinst/seqc_il_generator.py" = ["D100", "D417"]
"quantify_scheduler/backends/zhinst/settings.py" = ["ANN102", "ARG001", "D417"]
"quantify_scheduler/backends/zhinst_backend.py" = ["D202", "D417", "D419"]
"quantify_scheduler/gettables_profiled.py" = ["D102", "D404"]
"quantify_scheduler/instrument_coordinator/components/zhinst.py" = ["D101", "D102"]

# Files that might still need to be fixed in the future
"quantify_scheduler/backends/mock/mock_rom.py" = ["D101", "D102"]  # Mock rom doesn't need proper documentation
"quantify_scheduler/schedules/_visualization/pulse_scheme.py" = ["D417"]  # TODO: refactor the functions in here

[tool.ruff.lint.isort]
known-first-party = ["quantify_core", "quantify_scheduler"]


[tool.black]
line-length = 100


[tool.pyright]
exclude = [
 "docs",
 "setup.py",
 # All files below are temporarily excluded explicitly and expected to be gradually turned into pyright-compliancy
 "quantify_scheduler/backends/graph_compilation.py",
 "quantify_scheduler/backends/zhinst_backend.py",
 "quantify_scheduler/backends/types/zhinst.py",
 "quantify_scheduler/backends/zhinst/helpers.py",
 "quantify_scheduler/backends/zhinst/seqc_il_generator.py",
 "quantify_scheduler/backends/zhinst/settings.py",
 "quantify_scheduler/instrument_coordinator/components/qblox.py",
 "quantify_scheduler/instrument_coordinator/components/zhinst.py",
 "quantify_scheduler/operations/acquisition_library.py",
 "quantify_scheduler/operations/gate_library.py",
 "quantify_scheduler/operations/measurement_factories.py",
 "quantify_scheduler/operations/nv_native_library.py",
 "quantify_scheduler/operations/pulse_factories.py",
 "quantify_scheduler/operations/pulse_library.py",
 "quantify_scheduler/schedules/schedule.py",
 "quantify_scheduler/schedules/timedomain_schedules.py",
 "quantify_scheduler/schedules/trace_schedules.py",
 "quantify_scheduler/schedules/verification.py",
 "quantify_scheduler/schedules/_visualization/pulse_diagram.py",
 "quantify_scheduler/schedules/_visualization/pulse_scheme.py",
 "tests/fixtures/mock_setup.py",
 "tests/scheduler/test_compilation.py",
 "tests/scheduler/test_corrections.py",
 "tests/scheduler/test_gate_library.py",
 "tests/scheduler/test_gettables.py",
 "tests/scheduler/test_json_utils.py",
 "tests/scheduler/test_pulse_library.py",
 "tests/scheduler/test_types.py",
 "tests/scheduler/backends/test_circuit_to_device.py",
 "tests/scheduler/backends/test_graph_compilation.py",
 "tests/scheduler/backends/test_qblox_backend.py",
 "tests/scheduler/backends/test_zhinst_backend.py",
 "tests/scheduler/backends/graph_backends/test_qblox_backend.py",
 "tests/scheduler/backends/qblox/test_driver_version_check.py",
 "tests/scheduler/backends/qblox/test_helpers_qblox.py",
 "tests/scheduler/backends/qblox/operation_handling/test_acquisitions.py",
 "tests/scheduler/backends/qblox/operation_handling/test_virtual.py",
 "tests/scheduler/backends/zhinst/test_helpers.py",
 "tests/scheduler/backends/zhinst/test_resolvers.py",
 "tests/scheduler/backends/zhinst/test_seqc_il_generator.py",
 "tests/scheduler/backends/zhinst/test_settings.py",
 "tests/scheduler/device_under_test/test_composite_square_edge.py",
 "tests/scheduler/device_under_test/test_nv_element.py",
 "tests/scheduler/device_under_test/test_specific_device_element.py",
 "tests/scheduler/helpers/test_schedule.py",
 "tests/scheduler/helpers/test_waveforms.py",
 "tests/scheduler/instrument_coordinator/test_instrument_coordinator.py",
 "tests/scheduler/instrument_coordinator/test_utility.py",
 "tests/scheduler/instrument_coordinator/components/test_qblox.py",
 "tests/scheduler/instrument_coordinator/components/test_zhinst.py",
 "tests/scheduler/schedules/compiles_all_backends.py",
 "tests/scheduler/schedules/test_schedule_plotting.py",
 "tests/scheduler/schedules/test_spectroscopy_schedules.py",
 "tests/scheduler/schedules/test_timedomain_schedules.py",
 "tests/scheduler/schedules/visualization/test_pulse_scheme.py",
 "tests/scheduler/structure/test_model.py",
]

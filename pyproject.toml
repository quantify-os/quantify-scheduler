[build-system]
requires = ["setuptools>=66.1"]
build-backend = "setuptools.build_meta"

[project]
name = "quantify-scheduler"
description="""\
  Quantify-scheduler is a Python package for writing quantum programs featuring \
  a hybrid gate-pulse control model with explicit timing control.\
"""
maintainers = [
  {name = "Edgar Reehuis", email = "ereehuis@qblox.com"},
  {name = "Robert Sokolewicz", email = "rsokolewicz@qblox.com"},
  {name = "Amirtha Varshiny Arumugam", email = "amirthavarshiny@orangeqs.com"},
  {name = "Viacheslav Ostroukh", email = "viacheslav@orangeqs.com"},
  {name = "Gábor Oszkár Dénes", email = "gdenes@qblox.com"},
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
]
keywords = ["quantum", "quantify"]
license = { text = "BSD-3-Clause" }
dynamic = ["version", "readme"]
requires-python = ">=3.9"
dependencies = [
  "columnar",
  "dataclasses-json",
  "eval-type-backport; python_version < '3.10'", # Required for pydantic's type checking in Python 3.9
  "fastjsonschema",
  "jinja2>=3.1.2",                      # pandas requires version 3.1.2 or newer
  "matplotlib",
  "networkx",
  "numpy<2.0 ; python_version < '3.10'",
  "numpy ; python_version >= '3.10'",
  "pandas[output_formatting]",
  "pathvalidate",
  "plotly",
  "pydantic>=2.0",
  "qblox-instruments>=0.16.0,<0.17.0", # Prevent upgrade upon minor release while allowing for installing patch releases
  "quantify-core>=0.8.1",              # acquisition data refactor in ScheduleGettable.
  "qcodes>=0.32.0",                    # 0.32.0: introduces InstrumentModule
  "scipy",
  "xxhash",

  # We are using rich in our tutorials
  "rich[jupyter]",
]

[project.optional-dependencies]
test = [
  "pytest~=8.3",
  "pytest-mock~=3.14",
  "diff-cover~=9.2",
  "pytest-mpl~=0.17",
]

docs = [
  "jupyter-sphinx~=0.5.3",
  "jupytext~=1.16",
  "sphinx~=7.4",
  "pydata-sphinx-theme~=0.16.1",
  "myst-nb~=1.2",
  "hvplot~=0.11.2",
  "plotly~=6.0.1",
  "scanpydoc~=0.14.0",
  "sphinx-autoapi~=3.6",
  "sphinx-autodoc-typehints<3.1",
  "sphinx-design~=0.6.1",
  "sphinx-jsonschema~=1.19",
  "sphinx-togglebutton~=0.3.2",
  "sphinx-copybutton~=0.5.2",
  "sphinxcontrib-bibtex~=2.6",
  "sphinxcontrib-mermaid~=1.0",
  "quantify_scheduler[zhinst]",
]

dev = [
  "pre-commit~=4.1",
  "pre-commit-hooks~=5.0",              # common hooks for git repos
  "pyright==1.1.396",
  "pytest-cov~=6.0",
  "pytest-xdist~=3.6",                  # run tests in parallel
  "ruff~=0.11.0",                       # linter
  "typos~=1.30",                        # spell checker
  "commitizen~=4.4",                    # commit messages
  "sphinx-autobuild~=2024.10",
  "quantify-scheduler[docs,test]",
]

zhinst = [
  "zhinst==21.8.20515; python_version<'3.10'",
  "zhinst-qcodes==0.1.4; python_version<'3.10'",
  "zhinst-toolkit==0.1.5; python_version<'3.10'",
]

[project.urls]
"Documentation" = "https://quantify-os.org/docs/quantify-scheduler/"
"Source" = "https://gitlab.com/quantify-os/quantify-scheduler"
"Issue tracker" = "https://gitlab.com/quantify-os/quantify-scheduler/-/issues"
"Changelog" = "https://gitlab.com/quantify-os/quantify-scheduler/-/blob/main/CHANGELOG.md"
"Slack" = "https://join.slack.com/t/quantify-hq/shared_invite/zt-1nd78r4e9-rbWdna53cW4DO_YbtMhVuA"
"Authors" = "https://gitlab.com/quantify-os/quantify-scheduler/-/blob/main/AUTHORS.md"


[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
include = ["quantify_scheduler", "quantify_scheduler.*"]

[tool.setuptools.package-data]
"*" = ["*.json"]

[tool.setuptools.dynamic]
readme = { file = ["README.md"], content-type = "text/markdown" }


[tool.ruff]
extend-exclude = [
  "docs",
  "**zhinst**",
]
line-length = 100
target-version = "py39"


[tool.ruff.lint]
select = [
  "F",     # Pyflakes
  "E",     # pycodestyle
  "W",     # pycodestyle
  "I",     # isort
  "N",     # pep8-naming
  "D",     # pydocstyle
  "UP",    # pyupgrade
  "ANN",   # flake8-annotations
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  "LOG",   # flake8-logging
  "PIE",   # flake8-pie
  "RSE",   # flake8-raise
  "SLOT",  # flake8-slots
  "SIM",   # flake8-simplify
  "TID",   # flake8-tidy-imports
  "TC",    # flake8-type-checking
  "ARG",   # flake8-unused-arguments
  "PD",    # pandas-vet
  "PGH",   # pygrep-hooks
  "PL",    # Pylint (PLC, PLE, PLR, PLW)
  "FLY",   # flynt
  "NPY",   # NumPy-specific rules
  "FURB",  # refurb
  "RUF",   # Ruff-specific rules
]
ignore = [
  "D105",     # Missing docstring in magic method
  "D107",     # Missing docstring in `__init__` (it should be completely absent in our convention)
  "D203",     # 1 blank line required before class docstring  (conflict with D211)
  "D205",     # blank-line-after-summary (Conflicts when summary is too large)
  "D212",     # Multi-line docstring summary should start at the first line (conflict with D213)
  "D401",     # Docstrings should be in imperative mood
  "UP038",    # Use `X | Y` in `isinstance` call instead of `(X, Y)` (future rule)
  "ANN002",   # Missing type annotation for *{name}
  "ANN003",   # Missing type annotation for **{name}
  "PLR0912",  # Too many branches (... > 12)
  "PLR0913",  # Too many arguments to function call (.../5)
  "B028",     # No explicit `stacklevel` keyword argument found
  "A005",     # Module shadows a Python standard-library module
  "PIE790",   # Unnecessary `pass` statement
  "PGH003",   # Use specific rule codes when ignoring type issues

  # NOTE: The following are going to be un-ignored in the code quality report
  "RUF005",   # Consider iterable unpacking instead of concatenation
  "RUF012",   # Mutable class attributes should be annotated with `typing.ClassVar`
  "RUF013",   # PEP484 prohibits implicit `Optional`
  "RUF015",   # Prefer next(...) over single element slice
]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]
runtime-evaluated-base-classes = [
  "pydantic.BaseModel",
  "dataclasses_json.DataClassJsonMixin",
  "quantify_scheduler.structure.model.DataStructure",
]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = [
  "*D_amp",
  "*G_amp",
  "*path_I*",
  "*path_Q*",
  "A",
  "I",
  "Q",
  "V",
  "amp_A",
  "amp_B",
  "dBm",
  "gain_I",
  "gain_Q",
  "net_zero_A_scale",
  "qC",
  "qT",
  "ram_Z_pulse",
  "reference_magnitude_*",
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true  # TODO: Disable with py3.10+

[tool.ruff.lint.per-file-ignores]
# Project specific files
"setup.py" = ["D", "ANN"]
"*/docs/source/conf.py" = ["E402", "F401"]
"__init__.py" = ["F401", "D104", "D400", "D415"]
"quantify_scheduler/_version.py" = ["ANN001", "ANN202"]  # _version.py doesn't need to be properly annotated

# Test don't need to be properly linted
"tests/**/*.py" = [
  "D",    # pydocstyle
  "ANN",  # flake8-annotations

  "F401",     # {name} imported but unused
  "F403",     # from {name} import * used
  "F811",     # Redefinition of unused {name} from {row}
  "N806",     # Variable {name} in function should be lowercase
  "S101",     # Use of `assert` detected
  "B011",     # Do not `assert False`, raise `AssertionError()`
  "B017",     # Do not assert blind exception
  "PIE804",   # Unnecessary `dict` kwargs
  "SLF001",   # Private member accessed
  "ARG001",   # Unused function argument
  "PLR2004",  # Magic value used in comparison, consider replacing `...` with a constant variable
  "RUF018",   # Avoid assignment expressions in `assert` statements
]

# Type checking and naming conventions for the pydantic files (backends/types) is annoying
"quantify_scheduler/backends/types/common.py" = ["ANN001", "ANN202"]
"quantify_scheduler/backends/types/qblox.py" = ["ANN001"]

# Files that will be removed/refactored away in future versions, so no need to do complex fixes
"quantify_scheduler/gettables_profiled.py" = ["D102", "D404"]

# Files that might still need to be fixed in the future
"quantify_scheduler/backends/mock/mock_rom.py" = ["D101"]  # Mock rom doesn't need proper documentation
"quantify_scheduler/schedules/_visualization/pulse_scheme.py" = ["D417"]  # TODO: refactor the functions in here

[tool.ruff.lint.isort]
extra-standard-library = ["typing_extensions"]
known-first-party = ["quantify_core", "quantify_scheduler"]
split-on-trailing-comma = true  # TODO: make false later

[tool.ruff.lint.pylint]
allow-magic-value-types = ["str", "int"]


# This is not a real tool; the section is used to generate the code quality report with additional rules
[tool.ruff-warnings.lint]
extend-select = [
  "C90",   # mccabe
  "S",     # flake8-bandit
  "B",     # flake8-bugbear
  "A",     # flake8-builtins (overrides ignores)
  "C4",    # flake8-comprehensions
  "ICN",   # flake8-import-conventions
  "G",     # flake8-logging-format
  "SLF",   # flake8-self
  "FIX",   # flake8-fixme
  "PERF",  # Perflint
  "RUF",   # Ruff-specific rules (overrides ignores)
]


[tool.pyright]
exclude = [
  "docs",
  "setup.py",
  # All files below are temporarily excluded explicitly and expected to be gradually turned into pyright-compliancy
  "quantify_scheduler/backends/graph_compilation.py",
  "quantify_scheduler/backends/zhinst_backend.py",
  "quantify_scheduler/backends/types/zhinst.py",
  "quantify_scheduler/backends/zhinst/helpers.py",
  "quantify_scheduler/backends/zhinst/seqc_il_generator.py",
  "quantify_scheduler/backends/zhinst/settings.py",
  "quantify_scheduler/instrument_coordinator/components/zhinst.py",
  "quantify_scheduler/operations/acquisition_library.py",
  "quantify_scheduler/operations/gate_library.py",
  "quantify_scheduler/operations/measurement_factories.py",
  "quantify_scheduler/operations/nv_native_library.py",
  "quantify_scheduler/operations/pulse_factories.py",
  "quantify_scheduler/operations/pulse_library.py",
  "quantify_scheduler/schedules/schedule.py",
  "quantify_scheduler/schedules/timedomain_schedules.py",
  "quantify_scheduler/schedules/trace_schedules.py",
  "quantify_scheduler/schedules/verification.py",
  "quantify_scheduler/schedules/_visualization/pulse_diagram.py",
  "quantify_scheduler/schedules/_visualization/pulse_scheme.py",
  "tests/fixtures/mock_setup.py",
  "tests/scheduler/test_compilation.py",
  "tests/scheduler/test_corrections.py",
  "tests/scheduler/test_gate_library.py",
  "tests/scheduler/test_gettables.py",
  "tests/scheduler/test_json_utils.py",
  "tests/scheduler/test_pulse_library.py",
  "tests/scheduler/test_types.py",
  "tests/scheduler/backends/test_circuit_to_device.py",
  "tests/scheduler/backends/test_graph_compilation.py",
  "tests/scheduler/backends/test_qblox_backend.py",
  "tests/scheduler/backends/test_zhinst_backend.py",
  "tests/scheduler/backends/graph_backends/test_qblox_backend.py",
  "tests/scheduler/backends/qblox/test_driver_version_check.py",
  "tests/scheduler/backends/qblox/test_helpers_qblox.py",
  "tests/scheduler/backends/qblox/operation_handling/test_acquisitions.py",
  "tests/scheduler/backends/qblox/operation_handling/test_virtual.py",
  "tests/scheduler/backends/zhinst/test_helpers.py",
  "tests/scheduler/backends/zhinst/test_resolvers.py",
  "tests/scheduler/backends/zhinst/test_seqc_il_generator.py",
  "tests/scheduler/backends/zhinst/test_settings.py",
  "tests/scheduler/device_under_test/test_composite_square_edge.py",
  "tests/scheduler/device_under_test/test_nv_element.py",
  "tests/scheduler/device_under_test/test_specific_device_element.py",
  "tests/scheduler/helpers/test_schedule.py",
  "tests/scheduler/helpers/test_waveforms.py",
  "tests/scheduler/instrument_coordinator/test_instrument_coordinator.py",
  "tests/scheduler/instrument_coordinator/test_utility.py",
  "tests/scheduler/instrument_coordinator/components/test_qblox.py",
  "tests/scheduler/instrument_coordinator/components/test_zhinst.py",
  "tests/scheduler/schedules/compiles_all_backends.py",
  "tests/scheduler/schedules/test_schedule_plotting.py",
  "tests/scheduler/schedules/test_spectroscopy_schedules.py",
  "tests/scheduler/schedules/test_timedomain_schedules.py",
  "tests/scheduler/schedules/visualization/test_pulse_scheme.py",
  "tests/scheduler/structure/test_model.py",
]


[tool.typos]
files.extend-exclude = [
  "*.svg",
  "**zhinst**",
]
default.extend-ignore-identifiers-re = [
  "ND",
  "_INTERM_FREQ_",
  "_ser_",
  "annote",  # Found in refs.bib
  "arange",  # np.arange()
  "ba",
  "interm_freq",
  "op_strat",
]
